package br.com.brazuca.brazucaapi.controller;

import java.net.URI;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import br.com.brazuca.brazucaapi.dto.CompeticaoDTO;
import br.com.brazuca.brazucaapi.dto.CompeticaoResponseDTO;
import br.com.brazuca.brazucaapi.dto.EquipeDTO;
import br.com.brazuca.brazucaapi.dto.EquipeResponseDTO;
import br.com.brazuca.brazucaapi.entity.Competicao;
import br.com.brazuca.brazucaapi.entity.Equipe;
import br.com.brazuca.brazucaapi.exception.NotFoundException;
import br.com.brazuca.brazucaapi.exception.StandardError;
import br.com.brazuca.brazucaapi.repository.EquipeRepository;
import br.com.brazuca.brazucaapi.service.CompeticaoService;
import br.com.brazuca.brazucaapi.service.EquipeService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Api("API de Competicoes")
@RestController
@RequestMapping("/api/v1/competicao")
public class CompeticaoController {

	@Autowired
	private CompeticaoService competicaoService;
/*
	@ApiOperation(value = "Buscar competicao por id")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Competicao.class),
			@ApiResponse(code = 400, message = "Bad Request", response = StandardError.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = StandardError.class),
			@ApiResponse(code = 403, message = "Fordiben", response = StandardError.class),
			@ApiResponse(code = 404, message = "Not Found", response = StandardError.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = StandardError.class), })
	@GetMapping("/{id}")
	public ResponseEntity<Competicao> buscarEquipeId(@PathVariable("id") Long id) {

		return ResponseEntity.ok().body(competicaoService.buscarCompeticaoId(id));
	}

	@ApiOperation(value = "Listar Competicoes")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = CompeticaoResponseDTO.class),
			@ApiResponse(code = 400, message = "Bad Request", response = StandardError.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = StandardError.class),
			@ApiResponse(code = 403, message = "Fordiben", response = StandardError.class),
			@ApiResponse(code = 404, message = "Not Found", response = StandardError.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = StandardError.class), })
	@GetMapping
	public ResponseEntity<CompeticaoResponseDTO> listarCompeticoes() {

		return ResponseEntity.ok().body(competicaoService.listarCompeticoes());

	}

	@ApiOperation(value = "Inserir Competicao")
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Created", response = Competicao.class),
			@ApiResponse(code = 400, message = "Bad Request", response = StandardError.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = StandardError.class),
			@ApiResponse(code = 403, message = "Fordiben", response = StandardError.class),
			@ApiResponse(code = 404, message = "Not Found", response = StandardError.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = StandardError.class), })
	@PostMapping
	public ResponseEntity<Competicao> inserirEquipe(@Valid @RequestBody CompeticaoDTO dto) {

		Competicao competicao = competicaoService.inserirCompeticao(dto);
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(competicao.getId())
				.toUri();
		return ResponseEntity.created(location).body(competicao);

	}

	@ApiOperation(value = "Alterar Competicao")
	@ApiResponses(value = { @ApiResponse(code = 204, message = "no content", response = Void.class),
			@ApiResponse(code = 400, message = "Bad Request", response = StandardError.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = StandardError.class),
			@ApiResponse(code = 403, message = "Fordiben", response = StandardError.class),
			@ApiResponse(code = 404, message = "Not Found", response = StandardError.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = StandardError.class), })
	@PutMapping("/{id}")
	public ResponseEntity<Void> alterarCompeticao(@PathVariable("id") Long id, @Valid @RequestBody CompeticaoDTO dto) {

		competicaoService.alterarCompeticao(id, dto);

		return ResponseEntity.noContent().build();

	}
	
	@GetMapping("/")
	public String inicial() {
		
		return "index";
	}
	*/
}
