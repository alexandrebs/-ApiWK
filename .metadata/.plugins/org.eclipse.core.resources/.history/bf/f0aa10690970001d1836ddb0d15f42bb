package br.com.brazuca.brazucaapi.controller;

import java.net.URI;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import br.com.brazuca.brazucaapi.dto.DoadorDTO;
import br.com.brazuca.brazucaapi.dto.DoadorResponseDTO;
import br.com.brazuca.brazucaapi.dto.EquipeDTO;
import br.com.brazuca.brazucaapi.dto.EquipeResponseDTO;
import br.com.brazuca.brazucaapi.entity.Doador;
import br.com.brazuca.brazucaapi.entity.Equipe;
import br.com.brazuca.brazucaapi.exception.NotFoundException;
import br.com.brazuca.brazucaapi.exception.StandardError;
import br.com.brazuca.brazucaapi.repository.EquipeRepository;
import br.com.brazuca.brazucaapi.service.DoadorService;
import br.com.brazuca.brazucaapi.service.EquipeService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Api("API de Doadores")
@RestController
@RequestMapping("/api/v1/doador")
public class DoadorController {

	@Autowired
	
	
	private DoadorService doadorService;

	@ApiOperation(value = "Buscar doador por CPF")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Doador.class),
			@ApiResponse(code = 400, message = "Bad Request", response = StandardError.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = StandardError.class),
			@ApiResponse(code = 403, message = "Fordiben", response = StandardError.class),
			@ApiResponse(code = 404, message = "Not Found", response = StandardError.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = StandardError.class), })
	@GetMapping("/{id}")
	public ResponseEntity<Doador> buscarEquipeId(@PathVariable("id") String cpf) {

		return ResponseEntity.ok().body(doadorService.buscarDoadorCpf(cpf));
	}

	@ApiOperation(value = "Listar Doadores")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = DoadorResponseDTO.class),
			@ApiResponse(code = 400, message = "Bad Request", response = StandardError.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = StandardError.class),
			@ApiResponse(code = 403, message = "Fordiben", response = StandardError.class),
			@ApiResponse(code = 404, message = "Not Found", response = StandardError.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = StandardError.class), })
	@GetMapping
	public ResponseEntity<DoadorResponseDTO> listarDoadores() {

		return ResponseEntity.ok().body(doadorService.listarDoadores());

	}

	@ApiOperation(value = "Listar Doadores por Estado")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK"),
			@ApiResponse(code = 400, message = "Bad Request", response = StandardError.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = StandardError.class),
			@ApiResponse(code = 403, message = "Fordiben", response = StandardError.class),
			@ApiResponse(code = 404, message = "Not Found", response = StandardError.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = StandardError.class), })
	@GetMapping("/listarPorEstado")
	public ResponseEntity<?> listarDoadoresPorEstado() {

		return ResponseEntity.ok().body(doadorService.buscarDoadoresPorEstado());

	}
	
	
	@ApiOperation(value = "Listar IMC m√©dio em cada faixa de idade de dez em dez anos")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK"),
			@ApiResponse(code = 400, message = "Bad Request", response = StandardError.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = StandardError.class),
			@ApiResponse(code = 403, message = "Fordiben", response = StandardError.class),
			@ApiResponse(code = 404, message = "Not Found", response = StandardError.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = StandardError.class), })
	@GetMapping("/listarImcMedioFaixaEtaria")
	public ResponseEntity<?> idadeMediaIMCFaixaIdade() {

		return ResponseEntity.ok().body(doadorService.idadeMediaIMCFaixaIdade());

	}
	

	@ApiOperation(value = "Listar percentual de obesos entre os homens e entre as mulheres")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK"),
			@ApiResponse(code = 400, message = "Bad Request", response = StandardError.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = StandardError.class),
			@ApiResponse(code = 403, message = "Fordiben", response = StandardError.class),
			@ApiResponse(code = 404, message = "Not Found", response = StandardError.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = StandardError.class), })
	@GetMapping("/listarImcMedioFaixaEtaria")
	public ResponseEntity<?> percentualObesos() {

		return ResponseEntity.ok().body(doadorService.percentualObesos());

	}
}
